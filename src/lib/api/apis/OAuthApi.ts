/* tslint:disable */
/* eslint-disable */
/**
 * ZapMe
 * Open source application to control things
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompleteOAuthAccountCreationRequest,
  ErrorDetails,
  OAuthProviderList,
  OAuthResult,
  SignInOk,
} from '../models';
import {
    CompleteOAuthAccountCreationRequestFromJSON,
    CompleteOAuthAccountCreationRequestToJSON,
    ErrorDetailsFromJSON,
    ErrorDetailsToJSON,
    OAuthProviderListFromJSON,
    OAuthProviderListToJSON,
    OAuthResultFromJSON,
    OAuthResultToJSON,
    SignInOkFromJSON,
    SignInOkToJSON,
} from '../models';

export interface CompleteOAuthAccountCreationOperationRequest {
    completeOAuthAccountCreationRequest?: CompleteOAuthAccountCreationRequest;
}

export interface OAuthAuthenticateRequest {
    providerName: string;
}

export interface OAuthCallbackRequest {
    providerName: string;
}

/**
 * OAuthApi - interface
 * 
 * @export
 * @interface OAuthApiInterface
 */
export interface OAuthApiInterface {
    /**
     * 
     * @summary 
     * @param {CompleteOAuthAccountCreationRequest} [completeOAuthAccountCreationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    completeOAuthAccountCreationRaw(requestParameters: CompleteOAuthAccountCreationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignInOk>>;

    /**
     * 
     */
    completeOAuthAccountCreation(completeOAuthAccountCreationRequest?: CompleteOAuthAccountCreationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignInOk>;

    /**
     * 
     * @summary Start the OAuth authentication process
     * @param {string} providerName Name of the OAuth provider to use, supported providers can be fetched from M:ZapMe.Controllers.Api.V1.OAuthController.ListOAuthProviders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthAuthenticateRaw(requestParameters: OAuthAuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Start the OAuth authentication process
     */
    oAuthAuthenticate(providerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary 
     * @param {string} providerName Name of the OAuth provider to use, supported providers can be fetched from M:ZapMe.Controllers.Api.V1.OAuthController.ListOAuthProviders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthCallbackRaw(requestParameters: OAuthCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthResult>>;

    /**
     * 
     */
    oAuthCallback(providerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthResult>;

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthListProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthProviderList>>;

    /**
     * 
     */
    oAuthListProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthProviderList>;

}

/**
 * 
 */
export class OAuthApi extends runtime.BaseAPI implements OAuthApiInterface {

    /**
     * 
     */
    async completeOAuthAccountCreationRaw(requestParameters: CompleteOAuthAccountCreationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignInOk>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/oauth/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteOAuthAccountCreationRequestToJSON(requestParameters.completeOAuthAccountCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignInOkFromJSON(jsonValue));
    }

    /**
     * 
     */
    async completeOAuthAccountCreation(completeOAuthAccountCreationRequest?: CompleteOAuthAccountCreationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignInOk> {
        const response = await this.completeOAuthAccountCreationRaw({ completeOAuthAccountCreationRequest: completeOAuthAccountCreationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Start the OAuth authentication process
     */
    async oAuthAuthenticateRaw(requestParameters: OAuthAuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.providerName === null || requestParameters.providerName === undefined) {
            throw new runtime.RequiredError('providerName','Required parameter requestParameters.providerName was null or undefined when calling oAuthAuthenticate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/oauth/{providerName}/auth`.replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters.providerName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start the OAuth authentication process
     */
    async oAuthAuthenticate(providerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oAuthAuthenticateRaw({ providerName: providerName }, initOverrides);
    }

    /**
     * 
     */
    async oAuthCallbackRaw(requestParameters: OAuthCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthResult>> {
        if (requestParameters.providerName === null || requestParameters.providerName === undefined) {
            throw new runtime.RequiredError('providerName','Required parameter requestParameters.providerName was null or undefined when calling oAuthCallback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/oauth/{providerName}/callback`.replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters.providerName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthResultFromJSON(jsonValue));
    }

    /**
     * 
     */
    async oAuthCallback(providerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthResult> {
        const response = await this.oAuthCallbackRaw({ providerName: providerName }, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async oAuthListProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthProviderList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/oauth/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthProviderListFromJSON(jsonValue));
    }

    /**
     * 
     */
    async oAuthListProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthProviderList> {
        const response = await this.oAuthListProvidersRaw(initOverrides);
        return await response.value();
    }

}
