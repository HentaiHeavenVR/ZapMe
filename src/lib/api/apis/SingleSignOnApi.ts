/* tslint:disable */
/* eslint-disable */
/**
 * ZapMe
 * Open source application to control things
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorDetails,
  ProviderDataDto,
} from '../models';
import {
    ErrorDetailsFromJSON,
    ErrorDetailsToJSON,
    ProviderDataDtoFromJSON,
    ProviderDataDtoToJSON,
} from '../models';

export interface GetSsoProviderdataRequest {
    ssoToken?: string;
}

export interface InternalSsoAuthenticateRequest {
    providerName: string;
}

export interface InternalSsoCallbackRequest {
    providerName: string;
}

/**
 * SingleSignOnApi - interface
 * 
 * @export
 * @interface SingleSignOnApiInterface
 */
export interface SingleSignOnApiInterface {
    /**
     * 
     * @summary Returns the data supplied by the SSO provider
     * @param {string} [ssoToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleSignOnApiInterface
     */
    getSsoProviderdataRaw(requestParameters: GetSsoProviderdataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderDataDto>>;

    /**
     * Returns the data supplied by the SSO provider
     */
    getSsoProviderdata(ssoToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderDataDto>;

    /**
     * 
     * @summary Returns a list of supported SSO providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleSignOnApiInterface
     */
    getSsoProviderlistRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns a list of supported SSO providers
     */
    getSsoProviderlist(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @summary Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  SSO authentication endpoint
     * @param {string} providerName Name of the SSO provider to use, supported providers can be fetched from /api/v1/sso/providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleSignOnApiInterface
     */
    internalSsoAuthenticateRaw(requestParameters: InternalSsoAuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  SSO authentication endpoint
     */
    internalSsoAuthenticate(providerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  SSO authentication endpoint
     * @param {string} providerName Name of the SSO provider to use, supported providers can be fetched from /api/v1/sso/providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleSignOnApiInterface
     */
    internalSsoCallbackRaw(requestParameters: InternalSsoCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  SSO authentication endpoint
     */
    internalSsoCallback(providerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class SingleSignOnApi extends runtime.BaseAPI implements SingleSignOnApiInterface {

    /**
     * Returns the data supplied by the SSO provider
     */
    async getSsoProviderdataRaw(requestParameters: GetSsoProviderdataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderDataDto>> {
        const queryParameters: any = {};

        if (requestParameters.ssoToken !== undefined) {
            queryParameters['ssoToken'] = requestParameters.ssoToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/sso/providerdata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderDataDtoFromJSON(jsonValue));
    }

    /**
     * Returns the data supplied by the SSO provider
     */
    async getSsoProviderdata(ssoToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderDataDto> {
        const response = await this.getSsoProviderdataRaw({ ssoToken: ssoToken }, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of supported SSO providers
     */
    async getSsoProviderlistRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/sso/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a list of supported SSO providers
     */
    async getSsoProviderlist(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getSsoProviderlistRaw(initOverrides);
        return await response.value();
    }

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  SSO authentication endpoint
     */
    async internalSsoAuthenticateRaw(requestParameters: InternalSsoAuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.providerName === null || requestParameters.providerName === undefined) {
            throw new runtime.RequiredError('providerName','Required parameter requestParameters.providerName was null or undefined when calling internalSsoAuthenticate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/sso/{providerName}`.replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters.providerName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  SSO authentication endpoint
     */
    async internalSsoAuthenticate(providerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.internalSsoAuthenticateRaw({ providerName: providerName }, initOverrides);
    }

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  SSO authentication endpoint
     */
    async internalSsoCallbackRaw(requestParameters: InternalSsoCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.providerName === null || requestParameters.providerName === undefined) {
            throw new runtime.RequiredError('providerName','Required parameter requestParameters.providerName was null or undefined when calling internalSsoCallback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/sso/{providerName}/callback`.replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters.providerName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  SSO authentication endpoint
     */
    async internalSsoCallback(providerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.internalSsoCallbackRaw({ providerName: providerName }, initOverrides);
    }

}
