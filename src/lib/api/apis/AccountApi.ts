/* tslint:disable */
/* eslint-disable */
/**
 * ZapMe
 * Open source application to control things
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountDto,
  AccountRecoveryConfirmRequest,
  AccountRecoveryRequestRequest,
  CreateAccountRequest,
  CreateOk,
  ErrorDetails,
  UpdateEmailOk,
  UpdateEmailRequest,
  UpdatePasswordRequest,
  UpdateProfilePictureOk,
  UpdateUserNameRequest,
} from '../models';
import {
    AccountDtoFromJSON,
    AccountDtoToJSON,
    AccountRecoveryConfirmRequestFromJSON,
    AccountRecoveryConfirmRequestToJSON,
    AccountRecoveryRequestRequestFromJSON,
    AccountRecoveryRequestRequestToJSON,
    CreateAccountRequestFromJSON,
    CreateAccountRequestToJSON,
    CreateOkFromJSON,
    CreateOkToJSON,
    ErrorDetailsFromJSON,
    ErrorDetailsToJSON,
    UpdateEmailOkFromJSON,
    UpdateEmailOkToJSON,
    UpdateEmailRequestFromJSON,
    UpdateEmailRequestToJSON,
    UpdatePasswordRequestFromJSON,
    UpdatePasswordRequestToJSON,
    UpdateProfilePictureOkFromJSON,
    UpdateProfilePictureOkToJSON,
    UpdateUserNameRequestFromJSON,
    UpdateUserNameRequestToJSON,
} from '../models';

export interface AccountRecoveryConfirmOperationRequest {
    accountRecoveryConfirmRequest?: AccountRecoveryConfirmRequest;
}

export interface AccountRecoveryRequestOperationRequest {
    accountRecoveryRequestRequest?: AccountRecoveryRequestRequest;
}

export interface ConnectSSOProviderRequest {
    ssoToken?: string;
}

export interface CreateAccountOperationRequest {
    createAccountRequest?: CreateAccountRequest;
}

export interface DeleteAccountRequest {
    password?: string;
    reason?: string;
}

export interface DisconnectSSOProviderRequest {
    providerName?: string;
}

export interface UpdateEmailOperationRequest {
    updateEmailRequest?: UpdateEmailRequest;
}

export interface UpdatePasswordOperationRequest {
    updatePasswordRequest?: UpdatePasswordRequest;
}

export interface UpdateProfilePictureRequest {
    body: Blob;
    hashSha256?: string;
}

export interface UpdateUserNameOperationRequest {
    updateUserNameRequest?: UpdateUserNameRequest;
}

export interface VerifyEmailAddressRequest {
    token?: string;
}

/**
 * AccountApi - interface
 * 
 * @export
 * @interface AccountApiInterface
 */
export interface AccountApiInterface {
    /**
     * 
     * @summary Complete the password reset request using the token that was received in the users email
     * @param {AccountRecoveryConfirmRequest} [accountRecoveryConfirmRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountRecoveryConfirmRaw(requestParameters: AccountRecoveryConfirmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Complete the password reset request using the token that was received in the users email
     */
    accountRecoveryConfirm(accountRecoveryConfirmRequest?: AccountRecoveryConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint
     * @param {AccountRecoveryRequestRequest} [accountRecoveryRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    accountRecoveryRequestRaw(requestParameters: AccountRecoveryRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint
     */
    accountRecoveryRequest(accountRecoveryRequestRequest?: AccountRecoveryRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Add a sso connection to account
     * @param {string} [ssoToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    connectSSOProviderRaw(requestParameters: ConnectSSOProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Add a sso connection to account
     */
    connectSSOProvider(ssoToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new account
     * @param {CreateAccountRequest} [createAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOk>>;

    /**
     * Create a new account
     */
    createAccount(createAccountRequest?: CreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOk>;

    /**
     * 
     * @summary Delete currently logged in account
     * @param {string} [password] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete currently logged in account
     */
    deleteAccount(password?: string, reason?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove a sso connection from account
     * @param {string} [providerName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    disconnectSSOProviderRaw(requestParameters: DisconnectSSOProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove a sso connection from account
     */
    disconnectSSOProvider(providerName?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    getAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDto>>;

    /**
     * 
     */
    getAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDto>;

    /**
     * 
     * @summary Updates the account email
     * @param {UpdateEmailRequest} [updateEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updateEmailRaw(requestParameters: UpdateEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEmailOk>>;

    /**
     * Updates the account email
     */
    updateEmail(updateEmailRequest?: UpdateEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEmailOk>;

    /**
     * 
     * @summary Updates the account password
     * @param {UpdatePasswordRequest} [updatePasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updatePasswordRaw(requestParameters: UpdatePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDto>>;

    /**
     * Updates the account password
     */
    updatePassword(updatePasswordRequest?: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDto>;

    /**
     * 
     * @summary Updates the account profile picture
     * @param {Blob} body 
     * @param {string} [hashSha256] [Optional] Sha-256 hash of the image bytes to verify the integrity of the image server-side
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updateProfilePictureRaw(requestParameters: UpdateProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfilePictureOk>>;

    /**
     * Updates the account profile picture
     */
    updateProfilePicture(body: Blob, hashSha256?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfilePictureOk>;

    /**
     * 
     * @summary Updates the account username
     * @param {UpdateUserNameRequest} [updateUserNameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updateUserNameRaw(requestParameters: UpdateUserNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the account username
     */
    updateUserName(updateUserNameRequest?: UpdateUserNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Verify the users email address
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    verifyEmailAddressRaw(requestParameters: VerifyEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify the users email address
     */
    verifyEmailAddress(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI implements AccountApiInterface {

    /**
     * Complete the password reset request using the token that was received in the users email
     */
    async accountRecoveryConfirmRaw(requestParameters: AccountRecoveryConfirmOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/recover-confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountRecoveryConfirmRequestToJSON(requestParameters.accountRecoveryConfirmRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Complete the password reset request using the token that was received in the users email
     */
    async accountRecoveryConfirm(accountRecoveryConfirmRequest?: AccountRecoveryConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountRecoveryConfirmRaw({ accountRecoveryConfirmRequest: accountRecoveryConfirmRequest }, initOverrides);
    }

    /**
     * Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint
     */
    async accountRecoveryRequestRaw(requestParameters: AccountRecoveryRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/recover`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountRecoveryRequestRequestToJSON(requestParameters.accountRecoveryRequestRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint
     */
    async accountRecoveryRequest(accountRecoveryRequestRequest?: AccountRecoveryRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountRecoveryRequestRaw({ accountRecoveryRequestRequest: accountRecoveryRequestRequest }, initOverrides);
    }

    /**
     * Add a sso connection to account
     */
    async connectSSOProviderRaw(requestParameters: ConnectSSOProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.ssoToken !== undefined) {
            queryParameters['ssoToken'] = requestParameters.ssoToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/sso`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a sso connection to account
     */
    async connectSSOProvider(ssoToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.connectSSOProviderRaw({ ssoToken: ssoToken }, initOverrides);
    }

    /**
     * Create a new account
     */
    async createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOk>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountRequestToJSON(requestParameters.createAccountRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOkFromJSON(jsonValue));
    }

    /**
     * Create a new account
     */
    async createAccount(createAccountRequest?: CreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOk> {
        const response = await this.createAccountRaw({ createAccountRequest: createAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete currently logged in account
     */
    async deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.password !== undefined && requestParameters.password !== null) {
            headerParameters['password'] = String(requestParameters.password);
        }

        if (requestParameters.reason !== undefined && requestParameters.reason !== null) {
            headerParameters['reason'] = String(requestParameters.reason);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete currently logged in account
     */
    async deleteAccount(password?: string, reason?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountRaw({ password: password, reason: reason }, initOverrides);
    }

    /**
     * Remove a sso connection from account
     */
    async disconnectSSOProviderRaw(requestParameters: DisconnectSSOProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/sso`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a sso connection from account
     */
    async disconnectSSOProvider(providerName?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.disconnectSSOProviderRaw({ providerName: providerName }, initOverrides);
    }

    /**
     * 
     */
    async getAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDtoFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDto> {
        const response = await this.getAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the account email
     */
    async updateEmailRaw(requestParameters: UpdateEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEmailOk>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEmailRequestToJSON(requestParameters.updateEmailRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateEmailOkFromJSON(jsonValue));
    }

    /**
     * Updates the account email
     */
    async updateEmail(updateEmailRequest?: UpdateEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEmailOk> {
        const response = await this.updateEmailRaw({ updateEmailRequest: updateEmailRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the account password
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePasswordRequestToJSON(requestParameters.updatePasswordRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDtoFromJSON(jsonValue));
    }

    /**
     * Updates the account password
     */
    async updatePassword(updatePasswordRequest?: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDto> {
        const response = await this.updatePasswordRaw({ updatePasswordRequest: updatePasswordRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the account profile picture
     */
    async updateProfilePictureRaw(requestParameters: UpdateProfilePictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfilePictureOk>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateProfilePicture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'image/png';

        if (requestParameters.hashSha256 !== undefined && requestParameters.hashSha256 !== null) {
            headerParameters['Hash-Sha256'] = String(requestParameters.hashSha256);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/pfp`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProfilePictureOkFromJSON(jsonValue));
    }

    /**
     * Updates the account profile picture
     */
    async updateProfilePicture(body: Blob, hashSha256?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfilePictureOk> {
        const response = await this.updateProfilePictureRaw({ body: body, hashSha256: hashSha256 }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the account username
     */
    async updateUserNameRaw(requestParameters: UpdateUserNameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/username`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserNameRequestToJSON(requestParameters.updateUserNameRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the account username
     */
    async updateUserName(updateUserNameRequest?: UpdateUserNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserNameRaw({ updateUserNameRequest: updateUserNameRequest }, initOverrides);
    }

    /**
     * Verify the users email address
     */
    async verifyEmailAddressRaw(requestParameters: VerifyEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/email/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the users email address
     */
    async verifyEmailAddress(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.verifyEmailAddressRaw({ token: token }, initOverrides);
    }

}
