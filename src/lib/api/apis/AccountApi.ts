/* tslint:disable */
/* eslint-disable */
/**
 * ZapMe
 * Open source application to control things
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountCreateOkResponseDto,
  AccountDto,
  CompleteAccountPasswordResetRequest,
  CreateAccountRequest,
  ErrorDetails,
  RequestAccountPasswordResetRequest,
  UpdateAccountEmailRequest,
  UpdateAccountPasswordRequest,
  UpdateAccountUsernameRequest,
  UpdateEmailOk,
  UpdateProfilePictureOk,
} from '../models';
import {
    AccountCreateOkResponseDtoFromJSON,
    AccountCreateOkResponseDtoToJSON,
    AccountDtoFromJSON,
    AccountDtoToJSON,
    CompleteAccountPasswordResetRequestFromJSON,
    CompleteAccountPasswordResetRequestToJSON,
    CreateAccountRequestFromJSON,
    CreateAccountRequestToJSON,
    ErrorDetailsFromJSON,
    ErrorDetailsToJSON,
    RequestAccountPasswordResetRequestFromJSON,
    RequestAccountPasswordResetRequestToJSON,
    UpdateAccountEmailRequestFromJSON,
    UpdateAccountEmailRequestToJSON,
    UpdateAccountPasswordRequestFromJSON,
    UpdateAccountPasswordRequestToJSON,
    UpdateAccountUsernameRequestFromJSON,
    UpdateAccountUsernameRequestToJSON,
    UpdateEmailOkFromJSON,
    UpdateEmailOkToJSON,
    UpdateProfilePictureOkFromJSON,
    UpdateProfilePictureOkToJSON,
} from '../models';

export interface CompleteAccountEmailVerificationRequest {
    token?: string;
}

export interface CompleteAccountPasswordResetOperationRequest {
    completeAccountPasswordResetRequest?: CompleteAccountPasswordResetRequest;
}

export interface CreateAccountOperationRequest {
    createAccountRequest?: CreateAccountRequest;
}

export interface DeleteAccountRequest {
    password?: string;
    reason?: string;
}

export interface InternalConnectSsoProviderRequest {
    ssoToken?: string;
}

export interface InternalDisconnectSsoProviderRequest {
    providerName?: string;
}

export interface RequestAccountPasswordResetOperationRequest {
    requestAccountPasswordResetRequest?: RequestAccountPasswordResetRequest;
}

export interface UpdateAccountAvatarRequest {
    body: Blob;
    hashSha256?: string;
}

export interface UpdateAccountEmailOperationRequest {
    updateAccountEmailRequest?: UpdateAccountEmailRequest;
}

export interface UpdateAccountPasswordOperationRequest {
    updateAccountPasswordRequest?: UpdateAccountPasswordRequest;
}

export interface UpdateAccountUsernameOperationRequest {
    updateAccountUsernameRequest?: UpdateAccountUsernameRequest;
}

/**
 * AccountApi - interface
 * 
 * @export
 * @interface AccountApiInterface
 */
export interface AccountApiInterface {
    /**
     * 
     * @summary Verify the users email address
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    completeAccountEmailVerificationRaw(requestParameters: CompleteAccountEmailVerificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify the users email address
     */
    completeAccountEmailVerification(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Complete the password reset request using the token that was received in the users email
     * @param {CompleteAccountPasswordResetRequest} [completeAccountPasswordResetRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    completeAccountPasswordResetRaw(requestParameters: CompleteAccountPasswordResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Complete the password reset request using the token that was received in the users email
     */
    completeAccountPasswordReset(completeAccountPasswordResetRequest?: CompleteAccountPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Create a new account
     * @param {CreateAccountRequest} [createAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountCreateOkResponseDto>>;

    /**
     * Create a new account
     */
    createAccount(createAccountRequest?: CreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountCreateOkResponseDto>;

    /**
     * 
     * @summary Delete currently logged in account
     * @param {string} [password] 
     * @param {string} [reason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete currently logged in account
     */
    deleteAccount(password?: string, reason?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    getAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDto>>;

    /**
     */
    getAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDto>;

    /**
     * 
     * @summary Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  Add a sso connection to account
     * @param {string} [ssoToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    internalConnectSsoProviderRaw(requestParameters: InternalConnectSsoProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  Add a sso connection to account
     */
    internalConnectSsoProvider(ssoToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  Remove a sso connection from account
     * @param {string} [providerName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    internalDisconnectSsoProviderRaw(requestParameters: InternalDisconnectSsoProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  Remove a sso connection from account
     */
    internalDisconnectSsoProvider(providerName?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint
     * @param {RequestAccountPasswordResetRequest} [requestAccountPasswordResetRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    requestAccountPasswordResetRaw(requestParameters: RequestAccountPasswordResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint
     */
    requestAccountPasswordReset(requestAccountPasswordResetRequest?: RequestAccountPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Updates the account avatar
     * @param {Blob} body 
     * @param {string} [hashSha256] [Optional] Sha-256 hash of the image bytes to verify the integrity of the image server-side
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updateAccountAvatarRaw(requestParameters: UpdateAccountAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfilePictureOk>>;

    /**
     * Updates the account avatar
     */
    updateAccountAvatar(body: Blob, hashSha256?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfilePictureOk>;

    /**
     * 
     * @summary Updates the account email
     * @param {UpdateAccountEmailRequest} [updateAccountEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updateAccountEmailRaw(requestParameters: UpdateAccountEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEmailOk>>;

    /**
     * Updates the account email
     */
    updateAccountEmail(updateAccountEmailRequest?: UpdateAccountEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEmailOk>;

    /**
     * 
     * @summary Updates the account password
     * @param {UpdateAccountPasswordRequest} [updateAccountPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updateAccountPasswordRaw(requestParameters: UpdateAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the account password
     */
    updateAccountPassword(updateAccountPasswordRequest?: UpdateAccountPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Updates the account username
     * @param {UpdateAccountUsernameRequest} [updateAccountUsernameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updateAccountUsernameRaw(requestParameters: UpdateAccountUsernameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the account username
     */
    updateAccountUsername(updateAccountUsernameRequest?: UpdateAccountUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI implements AccountApiInterface {

    /**
     * Verify the users email address
     */
    async completeAccountEmailVerificationRaw(requestParameters: CompleteAccountEmailVerificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/email/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the users email address
     */
    async completeAccountEmailVerification(token?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.completeAccountEmailVerificationRaw({ token: token }, initOverrides);
    }

    /**
     * Complete the password reset request using the token that was received in the users email
     */
    async completeAccountPasswordResetRaw(requestParameters: CompleteAccountPasswordResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/password-reset/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteAccountPasswordResetRequestToJSON(requestParameters.completeAccountPasswordResetRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Complete the password reset request using the token that was received in the users email
     */
    async completeAccountPasswordReset(completeAccountPasswordResetRequest?: CompleteAccountPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.completeAccountPasswordResetRaw({ completeAccountPasswordResetRequest: completeAccountPasswordResetRequest }, initOverrides);
    }

    /**
     * Create a new account
     */
    async createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountCreateOkResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountRequestToJSON(requestParameters.createAccountRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountCreateOkResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new account
     */
    async createAccount(createAccountRequest?: CreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountCreateOkResponseDto> {
        const response = await this.createAccountRaw({ createAccountRequest: createAccountRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete currently logged in account
     */
    async deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.password !== undefined && requestParameters.password !== null) {
            headerParameters['password'] = String(requestParameters.password);
        }

        if (requestParameters.reason !== undefined && requestParameters.reason !== null) {
            headerParameters['reason'] = String(requestParameters.reason);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete currently logged in account
     */
    async deleteAccount(password?: string, reason?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountRaw({ password: password, reason: reason }, initOverrides);
    }

    /**
     */
    async getAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDto> {
        const response = await this.getAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  Add a sso connection to account
     */
    async internalConnectSsoProviderRaw(requestParameters: InternalConnectSsoProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.ssoToken !== undefined) {
            queryParameters['ssoToken'] = requestParameters.ssoToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/sso`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  Add a sso connection to account
     */
    async internalConnectSsoProvider(ssoToken?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.internalConnectSsoProviderRaw({ ssoToken: ssoToken }, initOverrides);
    }

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  Remove a sso connection from account
     */
    async internalDisconnectSsoProviderRaw(requestParameters: InternalDisconnectSsoProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/sso`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Warning: This endpoint is not meant to be called by API clients, but only by the frontend.  Remove a sso connection from account
     */
    async internalDisconnectSsoProvider(providerName?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.internalDisconnectSsoProviderRaw({ providerName: providerName }, initOverrides);
    }

    /**
     * Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint
     */
    async requestAccountPasswordResetRaw(requestParameters: RequestAccountPasswordResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/password-reset/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestAccountPasswordResetRequestToJSON(requestParameters.requestAccountPasswordResetRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request password recovery of a account, a recovery email will be sent to the user that makes a call to the /recovery-confirm endpoint
     */
    async requestAccountPasswordReset(requestAccountPasswordResetRequest?: RequestAccountPasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.requestAccountPasswordResetRaw({ requestAccountPasswordResetRequest: requestAccountPasswordResetRequest }, initOverrides);
    }

    /**
     * Updates the account avatar
     */
    async updateAccountAvatarRaw(requestParameters: UpdateAccountAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfilePictureOk>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateAccountAvatar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'image/png';

        if (requestParameters.hashSha256 !== undefined && requestParameters.hashSha256 !== null) {
            headerParameters['Hash-Sha256'] = String(requestParameters.hashSha256);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/avatar`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProfilePictureOkFromJSON(jsonValue));
    }

    /**
     * Updates the account avatar
     */
    async updateAccountAvatar(body: Blob, hashSha256?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfilePictureOk> {
        const response = await this.updateAccountAvatarRaw({ body: body, hashSha256: hashSha256 }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the account email
     */
    async updateAccountEmailRaw(requestParameters: UpdateAccountEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateEmailOk>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountEmailRequestToJSON(requestParameters.updateAccountEmailRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateEmailOkFromJSON(jsonValue));
    }

    /**
     * Updates the account email
     */
    async updateAccountEmail(updateAccountEmailRequest?: UpdateAccountEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateEmailOk> {
        const response = await this.updateAccountEmailRaw({ updateAccountEmailRequest: updateAccountEmailRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the account password
     */
    async updateAccountPasswordRaw(requestParameters: UpdateAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountPasswordRequestToJSON(requestParameters.updateAccountPasswordRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the account password
     */
    async updateAccountPassword(updateAccountPasswordRequest?: UpdateAccountPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAccountPasswordRaw({ updateAccountPasswordRequest: updateAccountPasswordRequest }, initOverrides);
    }

    /**
     * Updates the account username
     */
    async updateAccountUsernameRaw(requestParameters: UpdateAccountUsernameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/account/username`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountUsernameRequestToJSON(requestParameters.updateAccountUsernameRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the account username
     */
    async updateAccountUsername(updateAccountUsernameRequest?: UpdateAccountUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAccountUsernameRaw({ updateAccountUsernameRequest: updateAccountUsernameRequest }, initOverrides);
    }

}
