/* tslint:disable */
/* eslint-disable */
/**
 * ZapMe
 * Open source application to control things
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiConfigDisabledFeatures
 */
export interface ApiConfigDisabledFeatures {
    /**
     * If true, WebRTC is disabled
     * @type {boolean}
     * @memberof ApiConfigDisabledFeatures
     */
    webRTC: boolean;
    /**
     * If true, WebSockets are disabled
     * @type {boolean}
     * @memberof ApiConfigDisabledFeatures
     */
    webSockets: boolean;
    /**
     * List of disabled endpoints, if an endpoint is in this list, it will return a "503 Service Unavailable"
     * @type {Array<string>}
     * @memberof ApiConfigDisabledFeatures
     */
    endpoints: Array<string>;
}

/**
 * Check if a given object implements the ApiConfigDisabledFeatures interface.
 */
export function instanceOfApiConfigDisabledFeatures(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "webRTC" in value;
    isInstance = isInstance && "webSockets" in value;
    isInstance = isInstance && "endpoints" in value;

    return isInstance;
}

export function ApiConfigDisabledFeaturesFromJSON(json: any): ApiConfigDisabledFeatures {
    return ApiConfigDisabledFeaturesFromJSONTyped(json, false);
}

export function ApiConfigDisabledFeaturesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiConfigDisabledFeatures {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'webRTC': json['webRTC'],
        'webSockets': json['webSockets'],
        'endpoints': json['endpoints'],
    };
}

export function ApiConfigDisabledFeaturesToJSON(value?: ApiConfigDisabledFeatures | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'webRTC': value.webRTC,
        'webSockets': value.webSockets,
        'endpoints': value.endpoints,
    };
}

