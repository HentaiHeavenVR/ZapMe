/* tslint:disable */
/* eslint-disable */
/**
 * ZapMe
 * Open source application to control things
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserOnlineStatus } from './UserOnlineStatus';
import {
    UserOnlineStatusFromJSON,
    UserOnlineStatusFromJSONTyped,
    UserOnlineStatusToJSON,
} from './UserOnlineStatus';

/**
 * Account object, this can only retrieved for the user you are logged in as
 * @export
 * @interface AccountDto
 */
export interface AccountDto {
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    profilePictureId?: string;
    /**
     * 
     * @type {UserOnlineStatus}
     * @memberof AccountDto
     */
    status?: UserOnlineStatus;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    statusText?: string;
    /**
     * Date this account was created at
     * @type {Date}
     * @memberof AccountDto
     */
    createdAt?: Date;
    /**
     * Last time this user was online
     * @type {Date}
     * @memberof AccountDto
     */
    lastOnline?: Date;
    /**
     * Obfuscated email of your account
     * @type {string}
     * @memberof AccountDto
     */
    email?: string;
    /**
     * True if email address has been verified
     * @type {boolean}
     * @memberof AccountDto
     */
    emailVerified?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountDto
     */
    acceptedTosVersion?: number;
    /**
     * Id of friends this account has
     * @type {Array<string>}
     * @memberof AccountDto
     */
    friends?: Array<string>;
    /**
     * OAuth2 providers this account is connected to
     * @type {Array<string>}
     * @memberof AccountDto
     */
    connectedAccounts?: Array<string>;
}

/**
 * Check if a given object implements the AccountDto interface.
 */
export function instanceOfAccountDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccountDtoFromJSON(json: any): AccountDto {
    return AccountDtoFromJSONTyped(json, false);
}

export function AccountDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'profilePictureId': !exists(json, 'profile_picture_id') ? undefined : json['profile_picture_id'],
        'status': !exists(json, 'status') ? undefined : UserOnlineStatusFromJSON(json['status']),
        'statusText': !exists(json, 'status_text') ? undefined : json['status_text'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'lastOnline': !exists(json, 'last_online') ? undefined : (new Date(json['last_online'])),
        'email': !exists(json, 'email') ? undefined : json['email'],
        'emailVerified': !exists(json, 'email_verified') ? undefined : json['email_verified'],
        'acceptedTosVersion': !exists(json, 'accepted_tos_version') ? undefined : json['accepted_tos_version'],
        'friends': !exists(json, 'friends') ? undefined : json['friends'],
        'connectedAccounts': !exists(json, 'connected_accounts') ? undefined : json['connected_accounts'],
    };
}

export function AccountDtoToJSON(value?: AccountDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'username': value.username,
        'profile_picture_id': value.profilePictureId,
        'status': UserOnlineStatusToJSON(value.status),
        'status_text': value.statusText,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'last_online': value.lastOnline === undefined ? undefined : (value.lastOnline.toISOString()),
        'email': value.email,
        'email_verified': value.emailVerified,
        'accepted_tos_version': value.acceptedTosVersion,
        'friends': value.friends,
        'connected_accounts': value.connectedAccounts,
    };
}

