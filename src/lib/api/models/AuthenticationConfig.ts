/* tslint:disable */
/* eslint-disable */
/**
 * ZapMe
 * Open source application to control things
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthenticationConfig
 */
export interface AuthenticationConfig {
    /**
     * Discord Client ID for OAuth, if null, Discord login will be disabled
     * @type {string}
     * @memberof AuthenticationConfig
     */
    discordClientId?: string | null;
    /**
     * Github Client ID for OAuth, if null, Github login will be disabled
     * @type {string}
     * @memberof AuthenticationConfig
     */
    githubClientId?: string | null;
    /**
     * Twitter Client ID for OAuth, if null, Twitter login will be disabled
     * @type {string}
     * @memberof AuthenticationConfig
     */
    twitterClientId?: string | null;
    /**
     * Google Client ID for OAuth, if null, Google login will be disabled
     * @type {string}
     * @memberof AuthenticationConfig
     */
    googleClientId?: string | null;
    /**
     * ReCaptcha site key for bot detection, if null, ReCaptcha will be disabled
     * @type {string}
     * @memberof AuthenticationConfig
     */
    recaptchaSiteKey?: string | null;
    /**
     * Turnstile site key for bot detection, if null, Turnstile will be disabled
     * @type {string}
     * @memberof AuthenticationConfig
     */
    turnstileSiteKey?: string | null;
}

/**
 * Check if a given object implements the AuthenticationConfig interface.
 */
export function instanceOfAuthenticationConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthenticationConfigFromJSON(json: any): AuthenticationConfig {
    return AuthenticationConfigFromJSONTyped(json, false);
}

export function AuthenticationConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'discordClientId': !exists(json, 'discordClientId') ? undefined : json['discordClientId'],
        'githubClientId': !exists(json, 'githubClientId') ? undefined : json['githubClientId'],
        'twitterClientId': !exists(json, 'twitterClientId') ? undefined : json['twitterClientId'],
        'googleClientId': !exists(json, 'googleClientId') ? undefined : json['googleClientId'],
        'recaptchaSiteKey': !exists(json, 'recaptchaSiteKey') ? undefined : json['recaptchaSiteKey'],
        'turnstileSiteKey': !exists(json, 'turnstileSiteKey') ? undefined : json['turnstileSiteKey'],
    };
}

export function AuthenticationConfigToJSON(value?: AuthenticationConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'discordClientId': value.discordClientId,
        'githubClientId': value.githubClientId,
        'twitterClientId': value.twitterClientId,
        'googleClientId': value.googleClientId,
        'recaptchaSiteKey': value.recaptchaSiteKey,
        'turnstileSiteKey': value.turnstileSiteKey,
    };
}

