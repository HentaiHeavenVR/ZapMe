/* tslint:disable */
/* eslint-disable */
/**
 * ZapMe
 * Open source application to control things
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConfigApi } from './ConfigApi';
import {
    ConfigApiFromJSON,
    ConfigApiFromJSONTyped,
    ConfigApiToJSON,
} from './ConfigApi';
import type { ConfigContact } from './ConfigContact';
import {
    ConfigContactFromJSON,
    ConfigContactFromJSONTyped,
    ConfigContactToJSON,
} from './ConfigContact';
import type { ConfigFounderSocials } from './ConfigFounderSocials';
import {
    ConfigFounderSocialsFromJSON,
    ConfigFounderSocialsFromJSONTyped,
    ConfigFounderSocialsToJSON,
} from './ConfigFounderSocials';

/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * Name of the product, e.g. "ZapMe"
     * @type {string}
     * @memberof Config
     */
    appName: string;
    /**
     * Version of the product, e.g. "1.0.0"
     * @type {string}
     * @memberof Config
     */
    appVersion: string;
    /**
     * The current Privacy Policy version, if the user has not accepted this version, they will be prompted to accept it
     * @type {number}
     * @memberof Config
     */
    privacyPolicyVersion: number;
    /**
     * Markdown of the Privacy Policy
     * @type {string}
     * @memberof Config
     */
    privacyPolicyMarkdown: string;
    /**
     * The current Terms of Service version, if the user has not accepted this version, they will be prompted to accept it
     * @type {number}
     * @memberof Config
     */
    termsOfServiceVersion: number;
    /**
     * Markdown of the Terms of Service
     * @type {string}
     * @memberof Config
     */
    termsOfServiceMarkdown: string;
    /**
     * 
     * @type {ConfigApi}
     * @memberof Config
     */
    api: ConfigApi;
    /**
     * 
     * @type {ConfigContact}
     * @memberof Config
     */
    contact: ConfigContact;
    /**
     * 
     * @type {ConfigFounderSocials}
     * @memberof Config
     */
    founderSocials: ConfigFounderSocials;
}

/**
 * Check if a given object implements the Config interface.
 */
export function instanceOfConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appName" in value;
    isInstance = isInstance && "appVersion" in value;
    isInstance = isInstance && "privacyPolicyVersion" in value;
    isInstance = isInstance && "privacyPolicyMarkdown" in value;
    isInstance = isInstance && "termsOfServiceVersion" in value;
    isInstance = isInstance && "termsOfServiceMarkdown" in value;
    isInstance = isInstance && "api" in value;
    isInstance = isInstance && "contact" in value;
    isInstance = isInstance && "founderSocials" in value;

    return isInstance;
}

export function ConfigFromJSON(json: any): Config {
    return ConfigFromJSONTyped(json, false);
}

export function ConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): Config {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appName': json['appName'],
        'appVersion': json['appVersion'],
        'privacyPolicyVersion': json['privacyPolicyVersion'],
        'privacyPolicyMarkdown': json['privacyPolicyMarkdown'],
        'termsOfServiceVersion': json['termsOfServiceVersion'],
        'termsOfServiceMarkdown': json['termsOfServiceMarkdown'],
        'api': ConfigApiFromJSON(json['api']),
        'contact': ConfigContactFromJSON(json['contact']),
        'founderSocials': ConfigFounderSocialsFromJSON(json['founderSocials']),
    };
}

export function ConfigToJSON(value?: Config | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appName': value.appName,
        'appVersion': value.appVersion,
        'privacyPolicyVersion': value.privacyPolicyVersion,
        'privacyPolicyMarkdown': value.privacyPolicyMarkdown,
        'termsOfServiceVersion': value.termsOfServiceVersion,
        'termsOfServiceMarkdown': value.termsOfServiceMarkdown,
        'api': ConfigApiToJSON(value.api),
        'contact': ConfigContactToJSON(value.contact),
        'founderSocials': ConfigFounderSocialsToJSON(value.founderSocials),
    };
}

