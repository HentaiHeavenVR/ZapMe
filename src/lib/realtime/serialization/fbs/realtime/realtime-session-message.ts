// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RealtimeSessionMessage {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): RealtimeSessionMessage {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRealtimeSessionMessage(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeSessionMessage
  ): RealtimeSessionMessage {
    return (obj || new RealtimeSessionMessage()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsRealtimeSessionMessage(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeSessionMessage
  ): RealtimeSessionMessage {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new RealtimeSessionMessage()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  recepientUserIds(index: number): string;
  recepientUserIds(
    index: number,
    optionalEncoding: flatbuffers.Encoding
  ): string | Uint8Array;
  recepientUserIds(
    index: number,
    optionalEncoding?: any
  ): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(
          this.bb!.__vector(this.bb_pos + offset) + index * 4,
          optionalEncoding
        )
      : null;
  }

  recepientUserIdsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startRealtimeSessionMessage(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addRecepientUserIds(
    builder: flatbuffers.Builder,
    recepientUserIdsOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, recepientUserIdsOffset, 0);
  }

  static createRecepientUserIdsVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startRecepientUserIdsVector(
    builder: flatbuffers.Builder,
    numElems: number
  ) {
    builder.startVector(4, numElems, 4);
  }

  static endRealtimeSessionMessage(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createRealtimeSessionMessage(
    builder: flatbuffers.Builder,
    recepientUserIdsOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    RealtimeSessionMessage.startRealtimeSessionMessage(builder);
    RealtimeSessionMessage.addRecepientUserIds(builder, recepientUserIdsOffset);
    return RealtimeSessionMessage.endRealtimeSessionMessage(builder);
  }
}
