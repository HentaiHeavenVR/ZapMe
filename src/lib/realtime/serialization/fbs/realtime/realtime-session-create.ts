// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RealtimeSessionCreate {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): RealtimeSessionCreate {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRealtimeSessionCreate(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeSessionCreate
  ): RealtimeSessionCreate {
    return (obj || new RealtimeSessionCreate()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsRealtimeSessionCreate(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeSessionCreate
  ): RealtimeSessionCreate {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new RealtimeSessionCreate()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  userIds(index: number): string;
  userIds(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
  userIds(index: number, optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding)
      : null;
  }

  userIdsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startRealtimeSessionCreate(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addUserIds(builder: flatbuffers.Builder, userIdsOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, userIdsOffset, 0);
  }

  static createUserIdsVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startUserIdsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endRealtimeSessionCreate(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createRealtimeSessionCreate(
    builder: flatbuffers.Builder,
    userIdsOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    RealtimeSessionCreate.startRealtimeSessionCreate(builder);
    RealtimeSessionCreate.addUserIds(builder, userIdsOffset);
    return RealtimeSessionCreate.endRealtimeSessionCreate(builder);
  }
}
