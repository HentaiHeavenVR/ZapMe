// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RealtimeSessionIceCandidateDiscovered {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): RealtimeSessionIceCandidateDiscovered {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRealtimeSessionIceCandidateDiscovered(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeSessionIceCandidateDiscovered
  ): RealtimeSessionIceCandidateDiscovered {
    return (obj || new RealtimeSessionIceCandidateDiscovered()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsRealtimeSessionIceCandidateDiscovered(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeSessionIceCandidateDiscovered
  ): RealtimeSessionIceCandidateDiscovered {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new RealtimeSessionIceCandidateDiscovered()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  candidate(): string | null;
  candidate(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  candidate(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startRealtimeSessionIceCandidateDiscovered(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addCandidate(builder: flatbuffers.Builder, candidateOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, candidateOffset, 0);
  }

  static endRealtimeSessionIceCandidateDiscovered(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createRealtimeSessionIceCandidateDiscovered(
    builder: flatbuffers.Builder,
    candidateOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    RealtimeSessionIceCandidateDiscovered.startRealtimeSessionIceCandidateDiscovered(builder);
    RealtimeSessionIceCandidateDiscovered.addCandidate(builder, candidateOffset);
    return RealtimeSessionIceCandidateDiscovered.endRealtimeSessionIceCandidateDiscovered(builder);
  }
}
