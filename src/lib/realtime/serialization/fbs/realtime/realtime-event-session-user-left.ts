// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RealtimeEventSessionUserLeft {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): RealtimeEventSessionUserLeft {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRealtimeEventSessionUserLeft(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeEventSessionUserLeft
  ): RealtimeEventSessionUserLeft {
    return (obj || new RealtimeEventSessionUserLeft()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsRealtimeEventSessionUserLeft(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeEventSessionUserLeft
  ): RealtimeEventSessionUserLeft {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new RealtimeEventSessionUserLeft()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  sessionId(): string | null;
  sessionId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  sessionId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  userId(): string | null;
  userId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  userId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startRealtimeEventSessionUserLeft(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addSessionId(
    builder: flatbuffers.Builder,
    sessionIdOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, sessionIdOffset, 0);
  }

  static addUserId(
    builder: flatbuffers.Builder,
    userIdOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, userIdOffset, 0);
  }

  static endRealtimeEventSessionUserLeft(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createRealtimeEventSessionUserLeft(
    builder: flatbuffers.Builder,
    sessionIdOffset: flatbuffers.Offset,
    userIdOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    RealtimeEventSessionUserLeft.startRealtimeEventSessionUserLeft(builder);
    RealtimeEventSessionUserLeft.addSessionId(builder, sessionIdOffset);
    RealtimeEventSessionUserLeft.addUserId(builder, userIdOffset);
    return RealtimeEventSessionUserLeft.endRealtimeEventSessionUserLeft(
      builder
    );
  }
}
