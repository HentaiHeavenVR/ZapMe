// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RealtimeSessionInviteAccept {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): RealtimeSessionInviteAccept {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRealtimeSessionInviteAccept(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeSessionInviteAccept
  ): RealtimeSessionInviteAccept {
    return (obj || new RealtimeSessionInviteAccept()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsRealtimeSessionInviteAccept(
    bb: flatbuffers.ByteBuffer,
    obj?: RealtimeSessionInviteAccept
  ): RealtimeSessionInviteAccept {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new RealtimeSessionInviteAccept()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  sessionId(): string | null;
  sessionId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  sessionId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  webrtcOffer(): string | null;
  webrtcOffer(
    optionalEncoding: flatbuffers.Encoding
  ): string | Uint8Array | null;
  webrtcOffer(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startRealtimeSessionInviteAccept(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addSessionId(
    builder: flatbuffers.Builder,
    sessionIdOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, sessionIdOffset, 0);
  }

  static addWebrtcOffer(
    builder: flatbuffers.Builder,
    webrtcOfferOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, webrtcOfferOffset, 0);
  }

  static endRealtimeSessionInviteAccept(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createRealtimeSessionInviteAccept(
    builder: flatbuffers.Builder,
    sessionIdOffset: flatbuffers.Offset,
    webrtcOfferOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    RealtimeSessionInviteAccept.startRealtimeSessionInviteAccept(builder);
    RealtimeSessionInviteAccept.addSessionId(builder, sessionIdOffset);
    RealtimeSessionInviteAccept.addWebrtcOffer(builder, webrtcOfferOffset);
    return RealtimeSessionInviteAccept.endRealtimeSessionInviteAccept(builder);
  }
}
