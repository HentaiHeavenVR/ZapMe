// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { DeviceParameter } from '../../fbs/device/device-parameter.js';
import * as flatbuffers from 'flatbuffers';

export class DeviceDescriptor {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): DeviceDescriptor {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDeviceDescriptor(
    bb: flatbuffers.ByteBuffer,
    obj?: DeviceDescriptor
  ): DeviceDescriptor {
    return (obj || new DeviceDescriptor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsDeviceDescriptor(
    bb: flatbuffers.ByteBuffer,
    obj?: DeviceDescriptor
  ): DeviceDescriptor {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new DeviceDescriptor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  ownerUserId(): string | null;
  ownerUserId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  ownerUserId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  deviceId(): string | null;
  deviceId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  deviceId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  modelId(): string | null;
  modelId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  modelId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  name(): string | null;
  name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  name(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  iconUrl(): string | null;
  iconUrl(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  iconUrl(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  parameters(index: number, obj?: DeviceParameter): DeviceParameter | null {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset
      ? (obj || new DeviceParameter()).__init(
          this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4),
          this.bb!
        )
      : null;
  }

  parametersLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startDeviceDescriptor(builder: flatbuffers.Builder) {
    builder.startObject(6);
  }

  static addOwnerUserId(builder: flatbuffers.Builder, ownerUserIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, ownerUserIdOffset, 0);
  }

  static addDeviceId(builder: flatbuffers.Builder, deviceIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, deviceIdOffset, 0);
  }

  static addModelId(builder: flatbuffers.Builder, modelIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, modelIdOffset, 0);
  }

  static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, nameOffset, 0);
  }

  static addIconUrl(builder: flatbuffers.Builder, iconUrlOffset: flatbuffers.Offset) {
    builder.addFieldOffset(4, iconUrlOffset, 0);
  }

  static addParameters(builder: flatbuffers.Builder, parametersOffset: flatbuffers.Offset) {
    builder.addFieldOffset(5, parametersOffset, 0);
  }

  static createParametersVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startParametersVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endDeviceDescriptor(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createDeviceDescriptor(
    builder: flatbuffers.Builder,
    ownerUserIdOffset: flatbuffers.Offset,
    deviceIdOffset: flatbuffers.Offset,
    modelIdOffset: flatbuffers.Offset,
    nameOffset: flatbuffers.Offset,
    iconUrlOffset: flatbuffers.Offset,
    parametersOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    DeviceDescriptor.startDeviceDescriptor(builder);
    DeviceDescriptor.addOwnerUserId(builder, ownerUserIdOffset);
    DeviceDescriptor.addDeviceId(builder, deviceIdOffset);
    DeviceDescriptor.addModelId(builder, modelIdOffset);
    DeviceDescriptor.addName(builder, nameOffset);
    DeviceDescriptor.addIconUrl(builder, iconUrlOffset);
    DeviceDescriptor.addParameters(builder, parametersOffset);
    return DeviceDescriptor.endDeviceDescriptor(builder);
  }
}
