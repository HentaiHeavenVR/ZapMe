// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { DeviceParameterValueType } from '../../fbs/device/device-parameter-value-type.js';
import * as flatbuffers from 'flatbuffers';

export class DeviceParameter {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): DeviceParameter {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDeviceParameter(
    bb: flatbuffers.ByteBuffer,
    obj?: DeviceParameter
  ): DeviceParameter {
    return (obj || new DeviceParameter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsDeviceParameter(
    bb: flatbuffers.ByteBuffer,
    obj?: DeviceParameter
  ): DeviceParameter {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new DeviceParameter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  name(): string | null;
  name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  name(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  type(): DeviceParameterValueType {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : DeviceParameterValueType.INT8;
  }

  commandCode(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
  }

  static startDeviceParameter(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, nameOffset, 0);
  }

  static addType(builder: flatbuffers.Builder, type: DeviceParameterValueType) {
    builder.addFieldInt8(1, type, DeviceParameterValueType.INT8);
  }

  static addCommandCode(builder: flatbuffers.Builder, commandCode: number) {
    builder.addFieldInt16(2, commandCode, 0);
  }

  static endDeviceParameter(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createDeviceParameter(
    builder: flatbuffers.Builder,
    nameOffset: flatbuffers.Offset,
    type: DeviceParameterValueType,
    commandCode: number
  ): flatbuffers.Offset {
    DeviceParameter.startDeviceParameter(builder);
    DeviceParameter.addName(builder, nameOffset);
    DeviceParameter.addType(builder, type);
    DeviceParameter.addCommandCode(builder, commandCode);
    return DeviceParameter.endDeviceParameter(builder);
  }
}
