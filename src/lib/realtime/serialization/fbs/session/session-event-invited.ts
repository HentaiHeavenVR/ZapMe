// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SessionEventInvited {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): SessionEventInvited {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsSessionEventInvited(
    bb: flatbuffers.ByteBuffer,
    obj?: SessionEventInvited
  ): SessionEventInvited {
    return (obj || new SessionEventInvited()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsSessionEventInvited(
    bb: flatbuffers.ByteBuffer,
    obj?: SessionEventInvited
  ): SessionEventInvited {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new SessionEventInvited()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  sessionId(): string | null;
  sessionId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  sessionId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  participantIds(index: number): string;
  participantIds(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
  participantIds(index: number, optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding)
      : null;
  }

  participantIdsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startSessionEventInvited(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addSessionId(builder: flatbuffers.Builder, sessionIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, sessionIdOffset, 0);
  }

  static addParticipantIds(builder: flatbuffers.Builder, participantIdsOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, participantIdsOffset, 0);
  }

  static createParticipantIdsVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startParticipantIdsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endSessionEventInvited(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createSessionEventInvited(
    builder: flatbuffers.Builder,
    sessionIdOffset: flatbuffers.Offset,
    participantIdsOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    SessionEventInvited.startSessionEventInvited(builder);
    SessionEventInvited.addSessionId(builder, sessionIdOffset);
    SessionEventInvited.addParticipantIds(builder, participantIdsOffset);
    return SessionEventInvited.endSessionEventInvited(builder);
  }
}
