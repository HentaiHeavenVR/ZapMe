// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class SessionDeviceDisconnected {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): SessionDeviceDisconnected {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsSessionDeviceDisconnected(
    bb: flatbuffers.ByteBuffer,
    obj?: SessionDeviceDisconnected
  ): SessionDeviceDisconnected {
    return (obj || new SessionDeviceDisconnected()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsSessionDeviceDisconnected(
    bb: flatbuffers.ByteBuffer,
    obj?: SessionDeviceDisconnected
  ): SessionDeviceDisconnected {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new SessionDeviceDisconnected()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  deviceId(): string | null;
  deviceId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  deviceId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startSessionDeviceDisconnected(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addDeviceId(builder: flatbuffers.Builder, deviceIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, deviceIdOffset, 0);
  }

  static endSessionDeviceDisconnected(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createSessionDeviceDisconnected(
    builder: flatbuffers.Builder,
    deviceIdOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    SessionDeviceDisconnected.startSessionDeviceDisconnected(builder);
    SessionDeviceDisconnected.addDeviceId(builder, deviceIdOffset);
    return SessionDeviceDisconnected.endSessionDeviceDisconnected(builder);
  }
}
