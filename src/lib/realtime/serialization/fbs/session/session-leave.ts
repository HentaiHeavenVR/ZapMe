// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class SessionLeave {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): SessionLeave {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsSessionLeave(bb: flatbuffers.ByteBuffer, obj?: SessionLeave): SessionLeave {
    return (obj || new SessionLeave()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsSessionLeave(
    bb: flatbuffers.ByteBuffer,
    obj?: SessionLeave
  ): SessionLeave {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new SessionLeave()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  sessionId(): string | null;
  sessionId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  sessionId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startSessionLeave(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addSessionId(builder: flatbuffers.Builder, sessionIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, sessionIdOffset, 0);
  }

  static endSessionLeave(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createSessionLeave(
    builder: flatbuffers.Builder,
    sessionIdOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    SessionLeave.startSessionLeave(builder);
    SessionLeave.addSessionId(builder, sessionIdOffset);
    return SessionLeave.endSessionLeave(builder);
  }
}
