// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class UserMessage {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): UserMessage {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsUserMessage(bb: flatbuffers.ByteBuffer, obj?: UserMessage): UserMessage {
    return (obj || new UserMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsUserMessage(
    bb: flatbuffers.ByteBuffer,
    obj?: UserMessage
  ): UserMessage {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new UserMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  userId(): string | null;
  userId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  userId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  message(): string | null;
  message(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  message(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  timestamp(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
  }

  static startUserMessage(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addUserId(builder: flatbuffers.Builder, userIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, userIdOffset, 0);
  }

  static addMessage(builder: flatbuffers.Builder, messageOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, messageOffset, 0);
  }

  static addTimestamp(builder: flatbuffers.Builder, timestamp: bigint) {
    builder.addFieldInt64(2, timestamp, BigInt('0'));
  }

  static endUserMessage(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createUserMessage(
    builder: flatbuffers.Builder,
    userIdOffset: flatbuffers.Offset,
    messageOffset: flatbuffers.Offset,
    timestamp: bigint
  ): flatbuffers.Offset {
    UserMessage.startUserMessage(builder);
    UserMessage.addUserId(builder, userIdOffset);
    UserMessage.addMessage(builder, messageOffset);
    UserMessage.addTimestamp(builder, timestamp);
    return UserMessage.endUserMessage(builder);
  }
}
