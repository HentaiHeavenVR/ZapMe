// automatically generated by the FlatBuffers compiler, do not modify

import { RealtimeSession } from '../../fbs/realtime/realtime-session.js';
import { ServerHeartbeat } from '../../fbs/server/server-heartbeat.js';
import { ServerHello } from '../../fbs/server/server-hello.js';
import { SystemMessage } from '../../fbs/server/system-message.js';

export enum ServerMessageBody {
  NONE = 0,
  hello = 1,
  heartbeat = 2,
  realtime_session = 3,
  system_message = 4,
}

export function unionToServerMessageBody(
  type: ServerMessageBody,
  accessor: (
    obj: RealtimeSession | ServerHeartbeat | ServerHello | SystemMessage
  ) => RealtimeSession | ServerHeartbeat | ServerHello | SystemMessage | null
): RealtimeSession | ServerHeartbeat | ServerHello | SystemMessage | null {
  switch (ServerMessageBody[type]) {
    case 'NONE':
      return null;
    case 'hello':
      return accessor(new ServerHello())! as ServerHello;
    case 'heartbeat':
      return accessor(new ServerHeartbeat())! as ServerHeartbeat;
    case 'realtime_session':
      return accessor(new RealtimeSession())! as RealtimeSession;
    case 'system_message':
      return accessor(new SystemMessage())! as SystemMessage;
    default:
      return null;
  }
}

export function unionListToServerMessageBody(
  type: ServerMessageBody,
  accessor: (
    index: number,
    obj: RealtimeSession | ServerHeartbeat | ServerHello | SystemMessage
  ) => RealtimeSession | ServerHeartbeat | ServerHello | SystemMessage | null,
  index: number
): RealtimeSession | ServerHeartbeat | ServerHello | SystemMessage | null {
  switch (ServerMessageBody[type]) {
    case 'NONE':
      return null;
    case 'hello':
      return accessor(index, new ServerHello())! as ServerHello;
    case 'heartbeat':
      return accessor(index, new ServerHeartbeat())! as ServerHeartbeat;
    case 'realtime_session':
      return accessor(index, new RealtimeSession())! as RealtimeSession;
    case 'system_message':
      return accessor(index, new SystemMessage())! as SystemMessage;
    default:
      return null;
  }
}
