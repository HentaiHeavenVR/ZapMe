// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class GroupMessage {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): GroupMessage {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsGroupMessage(bb: flatbuffers.ByteBuffer, obj?: GroupMessage): GroupMessage {
    return (obj || new GroupMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsGroupMessage(
    bb: flatbuffers.ByteBuffer,
    obj?: GroupMessage
  ): GroupMessage {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new GroupMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  groupId(): string | null;
  groupId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  groupId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  senderId(): string | null;
  senderId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  senderId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  message(): string | null;
  message(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  message(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  timestamp(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
  }

  static startGroupMessage(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addGroupId(builder: flatbuffers.Builder, groupIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, groupIdOffset, 0);
  }

  static addSenderId(builder: flatbuffers.Builder, senderIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, senderIdOffset, 0);
  }

  static addMessage(builder: flatbuffers.Builder, messageOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, messageOffset, 0);
  }

  static addTimestamp(builder: flatbuffers.Builder, timestamp: bigint) {
    builder.addFieldInt64(3, timestamp, BigInt('0'));
  }

  static endGroupMessage(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createGroupMessage(
    builder: flatbuffers.Builder,
    groupIdOffset: flatbuffers.Offset,
    senderIdOffset: flatbuffers.Offset,
    messageOffset: flatbuffers.Offset,
    timestamp: bigint
  ): flatbuffers.Offset {
    GroupMessage.startGroupMessage(builder);
    GroupMessage.addGroupId(builder, groupIdOffset);
    GroupMessage.addSenderId(builder, senderIdOffset);
    GroupMessage.addMessage(builder, messageOffset);
    GroupMessage.addTimestamp(builder, timestamp);
    return GroupMessage.endGroupMessage(builder);
  }
}
