// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ServerReady {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ServerReady {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsServerReady(bb: flatbuffers.ByteBuffer, obj?: ServerReady): ServerReady {
    return (obj || new ServerReady()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsServerReady(
    bb: flatbuffers.ByteBuffer,
    obj?: ServerReady
  ): ServerReady {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ServerReady()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  apiVersion(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  heartbeatIntervalMs(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  ratelimitMessagesPerSec(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  ratelimitMessagesPerMin(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  ratelimitBytesPerSec(): number {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  ratelimitBytesPerMin(): number {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  static startServerReady(builder: flatbuffers.Builder) {
    builder.startObject(6);
  }

  static addApiVersion(builder: flatbuffers.Builder, apiVersion: number) {
    builder.addFieldInt32(0, apiVersion, 0);
  }

  static addHeartbeatIntervalMs(builder: flatbuffers.Builder, heartbeatIntervalMs: number) {
    builder.addFieldInt32(1, heartbeatIntervalMs, 0);
  }

  static addRatelimitMessagesPerSec(builder: flatbuffers.Builder, ratelimitMessagesPerSec: number) {
    builder.addFieldInt32(2, ratelimitMessagesPerSec, 0);
  }

  static addRatelimitMessagesPerMin(builder: flatbuffers.Builder, ratelimitMessagesPerMin: number) {
    builder.addFieldInt32(3, ratelimitMessagesPerMin, 0);
  }

  static addRatelimitBytesPerSec(builder: flatbuffers.Builder, ratelimitBytesPerSec: number) {
    builder.addFieldInt32(4, ratelimitBytesPerSec, 0);
  }

  static addRatelimitBytesPerMin(builder: flatbuffers.Builder, ratelimitBytesPerMin: number) {
    builder.addFieldInt32(5, ratelimitBytesPerMin, 0);
  }

  static endServerReady(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createServerReady(
    builder: flatbuffers.Builder,
    apiVersion: number,
    heartbeatIntervalMs: number,
    ratelimitMessagesPerSec: number,
    ratelimitMessagesPerMin: number,
    ratelimitBytesPerSec: number,
    ratelimitBytesPerMin: number
  ): flatbuffers.Offset {
    ServerReady.startServerReady(builder);
    ServerReady.addApiVersion(builder, apiVersion);
    ServerReady.addHeartbeatIntervalMs(builder, heartbeatIntervalMs);
    ServerReady.addRatelimitMessagesPerSec(builder, ratelimitMessagesPerSec);
    ServerReady.addRatelimitMessagesPerMin(builder, ratelimitMessagesPerMin);
    ServerReady.addRatelimitBytesPerSec(builder, ratelimitBytesPerSec);
    ServerReady.addRatelimitBytesPerMin(builder, ratelimitBytesPerMin);
    return ServerReady.endServerReady(builder);
  }
}
