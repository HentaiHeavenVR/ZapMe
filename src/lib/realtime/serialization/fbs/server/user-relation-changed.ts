// automatically generated by the FlatBuffers compiler, do not modify

import { UserRelationType } from '../../fbs/server/user-relation-type.js';
import * as flatbuffers from 'flatbuffers';

export class UserRelationChanged {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): UserRelationChanged {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsUserRelationChanged(
    bb: flatbuffers.ByteBuffer,
    obj?: UserRelationChanged
  ): UserRelationChanged {
    return (obj || new UserRelationChanged()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsUserRelationChanged(
    bb: flatbuffers.ByteBuffer,
    obj?: UserRelationChanged
  ): UserRelationChanged {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new UserRelationChanged()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  userId(): string | null;
  userId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  userId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  relationType(): UserRelationType {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : UserRelationType.none;
  }

  static startUserRelationChanged(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addUserId(builder: flatbuffers.Builder, userIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, userIdOffset, 0);
  }

  static addRelationType(builder: flatbuffers.Builder, relationType: UserRelationType) {
    builder.addFieldInt8(1, relationType, UserRelationType.none);
  }

  static endUserRelationChanged(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createUserRelationChanged(
    builder: flatbuffers.Builder,
    userIdOffset: flatbuffers.Offset,
    relationType: UserRelationType
  ): flatbuffers.Offset {
    UserRelationChanged.startUserRelationChanged(builder);
    UserRelationChanged.addUserId(builder, userIdOffset);
    UserRelationChanged.addRelationType(builder, relationType);
    return UserRelationChanged.endUserRelationChanged(builder);
  }
}
