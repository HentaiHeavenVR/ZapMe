// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UserRelationDetailsUpdated {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): UserRelationDetailsUpdated {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsUserRelationDetailsUpdated(
    bb: flatbuffers.ByteBuffer,
    obj?: UserRelationDetailsUpdated
  ): UserRelationDetailsUpdated {
    return (obj || new UserRelationDetailsUpdated()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsUserRelationDetailsUpdated(
    bb: flatbuffers.ByteBuffer,
    obj?: UserRelationDetailsUpdated
  ): UserRelationDetailsUpdated {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new UserRelationDetailsUpdated()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  userId(): string | null;
  userId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  userId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  isFavorite(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  isMuted(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  nickname(): string | null;
  nickname(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  nickname(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  notes(): string | null;
  notes(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  notes(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startUserRelationDetailsUpdated(builder: flatbuffers.Builder) {
    builder.startObject(5);
  }

  static addUserId(builder: flatbuffers.Builder, userIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, userIdOffset, 0);
  }

  static addIsFavorite(builder: flatbuffers.Builder, isFavorite: boolean) {
    builder.addFieldInt8(1, +isFavorite, +false);
  }

  static addIsMuted(builder: flatbuffers.Builder, isMuted: boolean) {
    builder.addFieldInt8(2, +isMuted, +false);
  }

  static addNickname(builder: flatbuffers.Builder, nicknameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, nicknameOffset, 0);
  }

  static addNotes(builder: flatbuffers.Builder, notesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(4, notesOffset, 0);
  }

  static endUserRelationDetailsUpdated(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createUserRelationDetailsUpdated(
    builder: flatbuffers.Builder,
    userIdOffset: flatbuffers.Offset,
    isFavorite: boolean,
    isMuted: boolean,
    nicknameOffset: flatbuffers.Offset,
    notesOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    UserRelationDetailsUpdated.startUserRelationDetailsUpdated(builder);
    UserRelationDetailsUpdated.addUserId(builder, userIdOffset);
    UserRelationDetailsUpdated.addIsFavorite(builder, isFavorite);
    UserRelationDetailsUpdated.addIsMuted(builder, isMuted);
    UserRelationDetailsUpdated.addNickname(builder, nicknameOffset);
    UserRelationDetailsUpdated.addNotes(builder, notesOffset);
    return UserRelationDetailsUpdated.endUserRelationDetailsUpdated(builder);
  }
}
